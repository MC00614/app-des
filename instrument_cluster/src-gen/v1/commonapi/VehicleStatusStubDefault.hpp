/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_Vehicle_Status_STUB_DEFAULT_HPP_
#define V1_COMMONAPI_Vehicle_Status_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/commonapi/VehicleStatusStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace commonapi {

/**
 * Provides a default implementation for VehicleStatusStubRemoteEvent and
 * VehicleStatusStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT VehicleStatusStubDefault
    : public virtual VehicleStatusStub {
public:
    COMMONAPI_EXPORT VehicleStatusStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(VehicleStatus::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT VehicleStatusStubRemoteEvent* initStubAdapter(const std::shared_ptr< VehicleStatusStubAdapter> &_adapter) {
        CommonAPI::Stub<VehicleStatusStubAdapter, VehicleStatusStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const int16_t &getSpeedAttribute() {
        return speedAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const int16_t &getSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getSpeedAttribute();
    }
    COMMONAPI_EXPORT virtual void setSpeedAttribute(int16_t _value) {
        const bool valueChanged = trySetSpeedAttribute(std::move(_value));
        if (valueChanged) {
            fireSpeedAttributeChanged(speedAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value) {
        (void)_client;
        setSpeedAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint8_t &getBatteryAttribute() {
        return batteryAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getBatteryAttribute();
    }
    COMMONAPI_EXPORT virtual void setBatteryAttribute(uint8_t _value) {
        const bool valueChanged = trySetBatteryAttribute(std::move(_value));
        if (valueChanged) {
            fireBatteryAttributeChanged(batteryAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setBatteryAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const bool &getBrakeAttribute() {
        return brakeAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const bool &getBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getBrakeAttribute();
    }
    COMMONAPI_EXPORT virtual void setBrakeAttribute(bool _value) {
        const bool valueChanged = trySetBrakeAttribute(std::move(_value));
        if (valueChanged) {
            fireBrakeAttributeChanged(brakeAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
        (void)_client;
        setBrakeAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const int16_t &getTempAttribute() {
        return tempAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const int16_t &getTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getTempAttribute();
    }
    COMMONAPI_EXPORT virtual void setTempAttribute(int16_t _value) {
        const bool valueChanged = trySetTempAttribute(std::move(_value));
        if (valueChanged) {
            fireTempAttributeChanged(tempAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value) {
        (void)_client;
        setTempAttribute(_value);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetSpeedAttribute(int16_t _value) {
        if (!validateSpeedAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<VehicleStatusStubAdapter> stubAdapter = CommonAPI::Stub<VehicleStatusStubAdapter, VehicleStatusStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockSpeedAttribute(true);
            valueChanged = (speedAttributeValue_ != _value);
            speedAttributeValue_ = std::move(_value);
            stubAdapter->lockSpeedAttribute(false);
        } else {
            valueChanged = (speedAttributeValue_ != _value);
            speedAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateSpeedAttributeRequestedValue(const int16_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteSpeedAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetBatteryAttribute(uint8_t _value) {
        if (!validateBatteryAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<VehicleStatusStubAdapter> stubAdapter = CommonAPI::Stub<VehicleStatusStubAdapter, VehicleStatusStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockBatteryAttribute(true);
            valueChanged = (batteryAttributeValue_ != _value);
            batteryAttributeValue_ = std::move(_value);
            stubAdapter->lockBatteryAttribute(false);
        } else {
            valueChanged = (batteryAttributeValue_ != _value);
            batteryAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateBatteryAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteBatteryAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetBrakeAttribute(bool _value) {
        if (!validateBrakeAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<VehicleStatusStubAdapter> stubAdapter = CommonAPI::Stub<VehicleStatusStubAdapter, VehicleStatusStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockBrakeAttribute(true);
            valueChanged = (brakeAttributeValue_ != _value);
            brakeAttributeValue_ = std::move(_value);
            stubAdapter->lockBrakeAttribute(false);
        } else {
            valueChanged = (brakeAttributeValue_ != _value);
            brakeAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateBrakeAttributeRequestedValue(const bool &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteBrakeAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetTempAttribute(int16_t _value) {
        if (!validateTempAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<VehicleStatusStubAdapter> stubAdapter = CommonAPI::Stub<VehicleStatusStubAdapter, VehicleStatusStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockTempAttribute(true);
            valueChanged = (tempAttributeValue_ != _value);
            tempAttributeValue_ = std::move(_value);
            stubAdapter->lockTempAttribute(false);
        } else {
            valueChanged = (tempAttributeValue_ != _value);
            tempAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateTempAttributeRequestedValue(const int16_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteTempAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual VehicleStatusStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(VehicleStatusStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteSpeedAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteSpeedAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSpeedAttribute(int16_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetSpeedAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSpeedAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value) {
            (void)_client;
            return onRemoteSetSpeedAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteBatteryAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteBatteryAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBatteryAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetBatteryAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBatteryAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetBatteryAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteBrakeAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteBrakeAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBrakeAttribute(bool _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetBrakeAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBrakeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) {
            (void)_client;
            return onRemoteSetBrakeAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteTempAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteTempAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetTempAttribute(int16_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetTempAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetTempAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _value) {
            (void)_client;
            return onRemoteSetTempAttribute(_value);
        }

    private:
        VehicleStatusStubDefault *defaultStub_;
    };
protected:
    VehicleStatusStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    int16_t speedAttributeValue_ {};
    uint8_t batteryAttributeValue_ {};
    bool brakeAttributeValue_ {};
    int16_t tempAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_Vehicle_Status_STUB_DEFAULT

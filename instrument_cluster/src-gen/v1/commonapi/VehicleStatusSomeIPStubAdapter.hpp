/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_COMMONAPI_VEHICLE_STATUS_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_VEHICLE_STATUS_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/commonapi/VehicleStatusStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

template <typename _Stub = ::v1::commonapi::VehicleStatusStub, typename... _Stubs>
class VehicleStatusSomeIPStubAdapterInternal
    : public virtual VehicleStatusStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> VehicleStatusSomeIPStubAdapterHelper;

    ~VehicleStatusSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        VehicleStatusSomeIPStubAdapterHelper::deinit();
    }

    void fireSpeedAttributeChanged(const int16_t &_value);
    
    void fireBatteryAttributeChanged(const uint8_t &_value);
    
    void fireBrakeAttributeChanged(const bool &_value);
    
    void fireTempAttributeChanged(const int16_t &_value);
    
    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        CommonAPI::Version
    > getVehicleStatusInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        int16_t,
        CommonAPI::SomeIP::IntegerDeployment<int16_t>
    > getSpeedAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        int16_t,
        CommonAPI::SomeIP::IntegerDeployment<int16_t>
    > setSpeedAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getBatteryAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setBatteryAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        bool
    > getBrakeAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        bool
    > setBrakeAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        int16_t,
        CommonAPI::SomeIP::IntegerDeployment<int16_t>
    > getTempAttributeStubDispatcher;
    
    CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::VehicleStatusStub,
        int16_t,
        CommonAPI::SomeIP::IntegerDeployment<int16_t>
    > setTempAttributeStubDispatcher;
    
    VehicleStatusSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        VehicleStatusSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< VehicleStatusStub>(_stub)),
        getVehicleStatusInterfaceVersionStubDispatcher(&VehicleStatusStub::lockInterfaceVersionAttribute, &VehicleStatusStub::getInterfaceVersion, false, true),
        getSpeedAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockSpeedAttribute,
            &::v1::commonapi::VehicleStatusStub::getSpeedAttribute,
            false,
            _stub->hasElement(0)),
        setSpeedAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockSpeedAttribute,
            &::v1::commonapi::VehicleStatusStub::getSpeedAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteSetSpeedAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteSpeedAttributeChanged,
            &VehicleStatusStubAdapter::fireSpeedAttributeChanged,
            false,
            _stub->hasElement(0))
        ,
        getBatteryAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockBatteryAttribute,
            &::v1::commonapi::VehicleStatusStub::getBatteryAttribute,
            false,
            _stub->hasElement(1)),
        setBatteryAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockBatteryAttribute,
            &::v1::commonapi::VehicleStatusStub::getBatteryAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteSetBatteryAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteBatteryAttributeChanged,
            &VehicleStatusStubAdapter::fireBatteryAttributeChanged,
            false,
            _stub->hasElement(1))
        ,
        getBrakeAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockBrakeAttribute,
            &::v1::commonapi::VehicleStatusStub::getBrakeAttribute,
            false,
            _stub->hasElement(2)),
        setBrakeAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockBrakeAttribute,
            &::v1::commonapi::VehicleStatusStub::getBrakeAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteSetBrakeAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteBrakeAttributeChanged,
            &VehicleStatusStubAdapter::fireBrakeAttributeChanged,
            false,
            _stub->hasElement(2))
        ,
        getTempAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockTempAttribute,
            &::v1::commonapi::VehicleStatusStub::getTempAttribute,
            false,
            _stub->hasElement(3)),
        setTempAttributeStubDispatcher(
            &::v1::commonapi::VehicleStatusStub::lockTempAttribute,
            &::v1::commonapi::VehicleStatusStub::getTempAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteSetTempAttribute,
            &VehicleStatusStubRemoteEvent::onRemoteTempAttributeChanged,
            &VehicleStatusStubAdapter::fireTempAttributeChanged,
            false,
            _stub->hasElement(3))
    {
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xfa0) }, &getSpeedAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xfa1) }, &setSpeedAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1388) }, &getBatteryAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1389) }, &setBatteryAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1770) }, &getBrakeAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1771) }, &setBrakeAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b58) }, &getTempAttributeStubDispatcher );
        VehicleStatusSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1b59) }, &setTempAttributeStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF, 0xFFFFFFFF, 0xFFFFFFFF);

        // Provided events/fields
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x8110)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8110), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireSpeedAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::VehicleStatusStub>(_stub)->getSpeedAttribute(itsClient));
        }

        if (_stub->hasElement(1)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x811a)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x811a), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireBatteryAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::VehicleStatusStub>(_stub)->getBatteryAttribute(itsClient));
        }

        if (_stub->hasElement(2)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x8124)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8124), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireBrakeAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::VehicleStatusStub>(_stub)->getBrakeAttribute(itsClient));
        }

        if (_stub->hasElement(3)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x812e)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x812e), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireTempAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::VehicleStatusStub>(_stub)->getTempAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSpeedAttributeChanged(const int16_t &_value) {
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8110),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireBatteryAttributeChanged(const uint8_t &_value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x811a),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireBrakeAttributeChanged(const bool &_value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            bool
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8124),
        false,
        _value
    );
}

template <typename _Stub, typename... _Stubs>
void VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTempAttributeChanged(const int16_t &_value) {
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x812e),
        false,
        deployedValue
    );
}


template <typename _Stub, typename... _Stubs>
void VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::commonapi::VehicleStatusStub, typename... _Stubs>
class VehicleStatusSomeIPStubAdapter
    : public VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    VehicleStatusSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          VehicleStatusSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_Vehicle_Status_SOMEIP_STUB_ADAPTER_HPP_

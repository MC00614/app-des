/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/ManeuverSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createManeuverSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< ManeuverSomeIPProxy>(_address, _connection);
}

void initializeManeuverSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.Maneuver:v1_0:Maneuver",
        0x1234, 0x567d, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.Maneuver:v1_0",
        &createManeuverSomeIPProxy);
}

INITIALIZER(registerManeuverSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeManeuverSomeIPProxy);
}

ManeuverSomeIPProxy::ManeuverSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          steering_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8138), CommonAPI::SomeIP::event_id_t(0x8138), CommonAPI::SomeIP::method_id_t(0x1f40), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x1f41), true, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          throttle_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8142), CommonAPI::SomeIP::event_id_t(0x8142), CommonAPI::SomeIP::method_id_t(0x2328), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, CommonAPI::SomeIP::method_id_t(0x2329), true, static_cast< CommonAPI::EmptyDeployment* >(nullptr))
{
}

ManeuverSomeIPProxy::~ManeuverSomeIPProxy() {
    completed_.set_value();
}

ManeuverSomeIPProxy::SteeringAttribute& ManeuverSomeIPProxy::getSteeringAttribute() {
    return steering_;
}
ManeuverSomeIPProxy::ThrottleAttribute& ManeuverSomeIPProxy::getThrottleAttribute() {
    return throttle_;
}


void ManeuverSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> ManeuverSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace commonapi
} // namespace v1

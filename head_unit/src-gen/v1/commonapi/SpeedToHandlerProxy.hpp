/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_Speed_To_Handler_PROXY_HPP_
#define V1_COMMONAPI_Speed_To_Handler_PROXY_HPP_

#include <v1/commonapi/SpeedToHandlerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

template <typename ... _AttributeExtensions>
class SpeedToHandlerProxy
    : virtual public SpeedToHandler,
      virtual public SpeedToHandlerProxyBase,
      virtual public _AttributeExtensions... {
public:
    SpeedToHandlerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SpeedToHandlerProxy();

    typedef SpeedToHandler InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Returns the wrapper class that provides access to the broadcast SpeedStatusEvent.
     */
    virtual SpeedStatusEventEvent& getSpeedStatusEventEvent() {
        return delegate_->getSpeedStatusEventEvent();
    }



 private:
    std::shared_ptr< SpeedToHandlerProxyBase> delegate_;
};

typedef SpeedToHandlerProxy<> SpeedToHandlerProxyDefault;


//
// SpeedToHandlerProxy Implementation
//
template <typename ... _AttributeExtensions>
SpeedToHandlerProxy<_AttributeExtensions...>::SpeedToHandlerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< SpeedToHandlerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< SpeedToHandlerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SpeedToHandlerProxy<_AttributeExtensions...>::~SpeedToHandlerProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &SpeedToHandlerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SpeedToHandlerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SpeedToHandlerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SpeedToHandlerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SpeedToHandlerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> SpeedToHandlerProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace commonapi
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_Speed_To_Handler_PROXY_HPP_

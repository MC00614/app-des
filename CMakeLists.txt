cmake_minimum_required(VERSION 3.5)

project(app-hu LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++0x")

set(OUTPUT_FOLDER_NAME output)
set(OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FOLDER_NAME})
set(LIBRARY_FOLDER_NAME library)
set(LIBRARY_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FOLDER_NAME}/${LIBRARY_FOLDER_NAME})
set(EXECUTE_FOLDER_NAME execute)
set(EXECUTE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_FOLDER_NAME}/${EXECUTE_FOLDER_NAME})
set(CONFIG_FOLDER_NAME config)
set(CONFIG_DIR ${CMAKE_SOURCE_DIR}/${CONFIG_FOLDER_NAME})
set(SHELL_FOLDER_NAME tools)
set(SHELL_DIR ${CMAKE_SOURCE_DIR}/${SHELL_FOLDER_NAME})
set(INSTALL_DIRECTORY /usr/bin/${PROJECT_NAME})

find_package(CommonAPI REQUIRED)
find_package(Qt5 COMPONENTS Core Quick Gui Network Multimedia WebEngine REQUIRED)

include_directories(
     ${LIBRARY_FOLDER_NAME}/src-gen/vehicle/core/common
     ${LIBRARY_FOLDER_NAME}/src-gen/vehicle/core/proxy
     ${LIBRARY_FOLDER_NAME}/src-gen/vehicle/core/stub
     ${LIBRARY_FOLDER_NAME}/src-gen/vehicle/core/skel
     ${LIBRARY_FOLDER_NAME}/src-gen/handler/core/common
     ${LIBRARY_FOLDER_NAME}/src-gen/handler/core/proxy
     ${LIBRARY_FOLDER_NAME}/src-gen/handler/core/stub
     ${LIBRARY_FOLDER_NAME}/src-gen/handler/core/skel
     ${COMMONAPI_INCLUDE_DIRS}
)

add_subdirectory(library)

add_subdirectory(head_unit)
add_subdirectory(instrument_cluster)
add_subdirectory(sender)
add_subdirectory(exception_handler)

set(CONFIG_FOLDER_NAME config)
set(CONFIG_DIR ${CMAKE_SOURCE_DIR}/${CONFIG_FOLDER_NAME}/)
file(COPY ${CONFIG_DIR}
     DESTINATION ${OUTPUT_DIRECTORY}/${CONFIG_FOLDER_NAME})

set(SHELL_FOLDER_NAME tools)
set(SHELL_DIR ${CMAKE_SOURCE_DIR}/${SHELL_FOLDER_NAME}/)
file(COPY ${SHELL_DIR}
     DESTINATION ${OUTPUT_DIRECTORY}/${SHELL_FOLDER_NAME})

# INSTALLATION
install(DIRECTORY ${LIBRARY_DIRECTORY}
     DESTINATION ${INSTALL_DIRECTORY}
     FILE_PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)

install(DIRECTORY ${EXECUTE_DIRECTORY}
     DESTINATION ${INSTALL_DIRECTORY}
     FILE_PERMISSIONS OWNER_EXECUTE GROUP_EXECUTE WORLD_EXECUTE)

install(DIRECTORY ${OUTPUT_DIRECTORY}/${CONFIG_FOLDER_NAME}/
     DESTINATION ${INSTALL_DIRECTORY}
     FILE_PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)

install(DIRECTORY ${OUTPUT_DIRECTORY}/${SHELL_FOLDER_NAME}/
     DESTINATION ${INSTALL_DIRECTORY}
     FILE_PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ)
